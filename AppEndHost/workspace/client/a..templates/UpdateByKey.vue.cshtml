@using AppEndServer
@using AppEndDbIO
@using AppEndCommon
@using System.Linq.Expressions
@using Newtonsoft
@using Newtonsoft.Json
@using RazorEngine.Text
@{
	string loadApi = Model.ClientUI.LoadAPI;
	string submitApi = Model.ClientUI.SubmitAPI;
	string dbConfName = Model.DbDialog.DbConfName.ToString();

	string queryToMakeForm = submitApi == "UpdateByKey" ? loadApi : submitApi;

	string readByKeyRPC = Model.GetReadByKeyRPC();
	var readByKeyColumns = Model.GetReadByKeyColumns();

	List<string> groups = Model.DbDialog.GetGroups(queryToMakeForm);

	List<DbQueryColumn> humanIdCols = Model.GetColumnsHumanIdsForForm(queryToMakeForm);
	List<DbQueryColumn> imageCols = Model.GetColumnsImageForForm(queryToMakeForm);
	List<DbQueryColumn> normalCols = Model.GetColumnsNormalForForm(queryToMakeForm);
	List<DbQueryColumn> partialColumns = Model.GetColumnsPartialUpdateForForm(queryToMakeForm);
	
	var relationsManyToMany = Model.DbDialog.GetRelations(queryToMakeForm, RelationType.ManyToMany);
	var relationsOneToManyFileCentric = Model.DbDialog.GetRelations(queryToMakeForm, RelationType.OneToMany, true);
	var relationsOneToManyNormal = Model.DbDialog.GetRelations(queryToMakeForm, RelationType.OneToMany, false);

}
<template>
<div class="card h-100 bg-transparent rounded-0 border-0">
		<div class="card-header p-2 bg-success-subtle rounded-0 border-0" v-if="ismodal!=='true'">
			<div class="hstack gap-1">
				<button class="btn btn-sm btn-link text-decoration-none bg-hover-light" @click="ok" data-ae-key="ok">
					<i class="fa-solid fa-check pe-1"></i>
					<span>{{shared.translate("Save")}}</span>
				</button>
				<div class="p-0 ms-auto"></div>
			</div>
		</div>
		<div class="card-body bg-primary-subtle-light scrollable">

						@if (imageCols.Count > 0)
						{
							<div class="card rounded-1 border-light mb-1">
								<div class="card-body p-2">
									<div class="row">
										<div class="col"></div>
										@foreach (DbQueryColumn col in imageCols)
										{
											<div class="col-12">
												@(new RawString(Model.CompileTemplate("FormColumnContent", col.Name, submitApi)))
											</div>
										}
										<div class="col"></div>
									</div>
								</div>
							</div>
						}

						@if (humanIdCols.Count > 0)
						{
							<div class="card rounded-1 border-light mb-1">
								<div class="card-body">
									<div class="row">
										@foreach (DbQueryColumn col in humanIdCols)
										{
											<div class="col-48" v-if="inputs.fkColumn!=='@col.Name'">
												@(new RawString(Model.CompileTemplate("FormColumnContent", col.Name, submitApi)))
											</div>
										}
									</div>
								</div>
							</div>
						}

						@if (normalCols.Count > 0)
						{
							<div class="card rounded-1 border-light mb-1">
								<div class="card-body">
									<div class="row">
										@foreach (DbQueryColumn col in normalCols)
										{
											<div class="col-48" v-if="inputs.fkColumn!=='@col.Name'">
												@(new RawString(Model.CompileTemplate("FormColumnContent", col.Name, submitApi)))
											</div>
										}
									</div>
								</div>
							</div>
						}

						@if (partialColumns.Count > 0)
						{
							<div class="card rounded-1 border-light mb-1">
								<div class="card-body">
									<div class="row">
										@foreach (DbQueryColumn col in partialColumns)
										{
											<div class="col-48">
												@(new RawString(Model.CompileTemplate("FormColumnContent", col.Name, submitApi)))
											</div>
										}
									</div>
								</div>
							</div>
						}


						@foreach (string g in groups)
						{
							@if(Model.GetColumnsByGroupNameForForm(g).Count>0)
							{
								<div class="card rounded-1 border-light mb-1">
									<div class="card-header text-bg-light">
										{{shared.translate('@g')}}
									</div>
									<div class="card-body">
										<div class="row">
											@foreach (DbQueryColumn col in Model.GetColumnsByGroupNameForForm(g))
											{
												<div class="col-48">
													@(new RawString(Model.CompileTemplate("FormColumnContent", col.Name, submitApi)))
												</div>
											}
										</div>
									</div>
								</div>
							}
						}

						@foreach (var rel in relationsManyToMany)
						{
							<div class="card rounded-1 border-light mb-1">
								<div class="card-header text-bg-light">
									{{shared.translate('@rel.RelationName')}}
								</div>
								<div class="card-body">
									<div class="row">
										<div class="col-48">
											@if(rel.RelationUiWidget.ToString() == "CheckboxList")
											{
												@(new RawString(Model.CompileTemplate("FormRelationCheckboxList", rel.RelationName)))
											}
											@if (rel.RelationUiWidget.ToString() == "AddableList")
											{
												@(new RawString(Model.CompileTemplate("FormRelationAddable", rel.RelationName)))
											}
										</div>
									</div>
								</div>
							</div>
						}

						@foreach (var rel in relationsOneToManyFileCentric)
						{
							<div class="col-48">
								@(new RawString(Model.CompileTemplate("FormRelationFiles", rel.RelationName)))
							</div>
						}

						@foreach (var rel in relationsOneToManyNormal)
						{
							<div class="col-48">
								@(new RawString(Model.CompileTemplate("FormRelationNormal", rel.RelationName)))
							</div>
						}

									<br />


		</div>
		@if(submitApi!="")
		{
			<div class="card-footer p-3 bg-secondary-subtle bg-gradient border-0 rounded-0" v-if="ismodal==='true'">
			<div class="row">
				<div class="col-12">
					<button class="btn btn-sm btn-secondary w-100 py-2" @click="cancel" data-ae-key="ok">
						<i class="fa-solid fa-cancel pe-1"></i> <span>{{shared.translate("Cancel")}}</span>
					</button>
				</div>
				<div class="col-36">
					<button class="btn btn-sm btn-primary w-100 py-2" @click="ok" data-ae-key="ok">
						<i class="fa-solid fa-check pe-1"></i> <span>{{shared.translate("Save")}}</span>
					</button>
				</div>
			</div>
		</div>
		}
	</div>
</template>

<script>
	let _this = { cid: "", ismodal:"", c: null, inputs: {}, dbConfName: "", objectName: "", loadMethod: "", submitMethod: "", masterRequest: {}, initialRequests: [], pickerRequests: [], pickerHumanIds: [], initialResponses: [], row: {}, Relations: {}, RelationsMetaData: {}, createComponent: "", updateComponent: "", regulator: null };
	_this.dbConfName = "@Model.DbDialog.DbConfName";
	_this.objectName = "@Model.DbDialog.ObjectName";
	_this.submitMethod = "@submitApi";
	_this.createComponent = ""; 
	_this.updateComponent = "";

	@(new RawString("_this.masterRequest = " + Model.GetReadByKeyRpcBody().ToJsonStringByBuiltIn(false) + ";"))

	@foreach (var relO in relationsManyToMany)
	{
		@(new RawString("\n\r_this.initialRequests.push(" + Model.GetApiBodyForLinkingColumn(relO.RelationName).ToJsonStringByBuiltIn(false) + ");"))
		@(new RawString("\n\r_this.RelationsMetaData['" + relO.RelationName + "']=" + relO.ToJsonStringByBuiltIn(false) + ";"))
	}

	@foreach (var relO in relationsOneToManyFileCentric)
	{
		@(new RawString("\n\r_this.Relations['" + relO.RelationTable + "']=[];"))
		@(new RawString("\n\r_this.RelationsMetaData['" + relO.RelationName + "']=" + relO.ToJsonStringByBuiltIn(false) + ";"))
	}

	@foreach (var relO in relationsOneToManyNormal)
	{
		@(new RawString("\n\r_this.Relations['" + relO.RelationTable + "']=[];"))
		@(new RawString("\n\r_this.RelationsMetaData['" + relO.RelationName + "']=" + relO.ToJsonStringByBuiltIn(false) + ";"))
		@(new RawString("\n\r_this.RelationsMetaData['" + relO.RelationName + "']['createComponent']='" + "/a.DbComponents/" + Model.DbDialog.DbConfName + "_" + relO.RelationTable + "_Create" + "';"))
		@(new RawString("\n\r_this.RelationsMetaData['" + relO.RelationName + "']['updateComponent']='" + "/a.DbComponents/" + Model.DbDialog.DbConfName + "_" + relO.RelationTable + "_UpdateByKey" + "';"))
	}

	@foreach (var col in readByKeyColumns)
	{
		var dbCol = Model.DbDialog.GetColumn(col.Name);
		string uiWidget = (dbCol.UiProps != null && dbCol.UiProps.UiWidget != null) ? dbCol.UiProps.UiWidget.ToString().ToLower() : "";
		string collectionName = (uiWidget == "combo" || uiWidget == "radio") ? "initialRequests" : "pickerRequests";
		
		if (dbCol.Fk is not null && dbCol.Fk.Lookup is not null)
		{
			var lookUp = dbCol.Fk.Lookup;
			lookUp.Id = dbCol.Name + "_Lookup";
			@(new RawString("_this." + collectionName + ".push(" + lookUp.ToJsonStringByBuiltIn(false) + ");"))
			if (collectionName == "pickerRequests")
			{
				@(new RawString("\n\r_this.pickerHumanIds.push({Id:'" + col.Name + "_HumanIds',Items:" + Model.GetTargetHumanIdsFor(dbCol).ToJsonStringByBuiltIn(false) + "});"))
			}
		}
	}


	export default {
		methods: {
			localSelectFiles(relName, parentId, fieldName_FileContent, fieldName_FileName, fieldName_FileSize, fieldName_FileType) {
				crudSelectFiles(_this, relName, parentId, fieldName_FileContent, fieldName_FileName, fieldName_FileSize, fieldName_FileType);
			},
			localAddRelation(relName) { crudAddRelation(_this, relName); },
			localRemoveRelation(relName, ind) { crudRemoveRelation(_this, relName, ind); },
			localOpenPicker(colName) { crudOpenPicker(_this, _this.c.row, colName); },
			localCrudUpdateRelation(compPath, modalSize, recordKey,ind,fkColumn,relName) { crudUpdateRelation(_this, compPath, modalSize, recordKey,ind,fkColumn,relName); },
			localCrudBaseInfo() { crudLoadBaseInfo(_this); },
			localLoadMasterRecord() { 
				if (_this.c.inputs.okAction !== 'return') crudLoadMasterRecord(_this);
				else _this.c.row = _this.c.inputs.row;
			},
			localFinalization() {
				if(_this.c.ismodal!=="true") shared.setAppTitle(shared.translate("@(readByKeyRPC.Replace(dbConfName + ".", "").Replace(".", ", "))"));
			},
			ok() {
				if (!_this.regulator.isValid()) return;
				if (_this.c.inputs.okAction === 'return') {
					if (_this.inputs.callback) _this.inputs.callback(_this.row);
					_this.c.close();
				} else {
					crudSaveRecord(_this, function () {
						if (_this.inputs.callback) _this.inputs.callback();
						_this.c.close();
					});
				}
			},
			cancel() { _this.c.close(); },
			close() { shared.closeComponent(_this.cid); }
		},
		setup(props) {
			_this.cid = props['cid'];
			_this.ismodal = props['ismodal'];
			_this.inputs = shared["params_" + _this.cid];
			if(fixNull(getQueryString("key"),'') !== '') {
				_this.inputs = {};
				_this.inputs["key"] = getQueryString("key");
			}
		},
		data() { return _this; },
		created() { _this.c = this; },
		mounted() { initVueComponent(_this); _this.c.localCrudBaseInfo(); _this.c.localLoadMasterRecord(); _this.c.localFinalization(); },
		props: { cid: String, ismodal: String }
	}

</script>
